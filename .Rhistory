knitr::opts_chunk$set(echo = TRUE)
library(leaflet)
markerClusterOptions()
library(openxlsx)
library(dplyr)
library(maps)
## get current covid 19 Data
covid <- read.xlsx("https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide.xlsx")
covid_plot <- group_by(covid,countriesAndTerritories) %>% summarise(text = paste0(countryterritoryCode[1], " cases: ", sum(cases), " deaths: ",sum(deaths)))
## merge it with geolocation data of worlds capital cities
mapdata <- world.cities %>%
filter(capital == 1) %>%
transmute(country = country.etc, lat = lat, lng = long) %>%
left_join(covid, ., by = c("countriesAndTerritories" = "country"))
names covid
names(covid)
covid %>% group_by(countriesAndTerritories) %>% summarise(cases_total = sum(cases), cases_yesterday = first(cases), deaths_total = sum(deaths), deaths_yesterday = first(deaths))
covid %>% group_by(countriesAndTerritories) %>% summarise(cases_total = sum(cases), cases_yesterday = first(cases), deaths_total = sum(deaths), deaths_yesterday = first(deaths)) %>% arrange(popData2018)
covid %>% group_by(countriesAndTerritories) %>% summarise(cases_total = sum(cases), cases_yesterday = first(cases), deaths_total = sum(deaths), deaths_yesterday = first(deaths), population = popData2018) %>% arrange(population)
covid %>% group_by(countriesAndTerritories) %>% summarise(cases_total = sum(cases), cases_yesterday = first(cases), deaths_total = sum(deaths), deaths_yesterday = first(deaths), population = first(popData2018)) %>% arrange(population)
covid %>% group_by(countriesAndTerritories) %>% summarise(cases_total = sum(cases), cases_yesterday = first(cases), deaths_total = sum(deaths), deaths_yesterday = first(deaths), population = first(popData2018)) %>% arrange(population, desc = TRUE)
?arrange
covid %>% group_by(countriesAndTerritories) %>% summarise(cases_total = sum(cases), cases_yesterday = first(cases), deaths_total = sum(deaths), deaths_yesterday = first(deaths), population = first(popData2018)) %>% arrange(desc(population))
install.packages(DT)
install.packages("DT")
library(DT)
covid %>% group_by(countriesAndTerritories) %>% summarise(cases_total = sum(cases), cases_yesterday = first(cases), deaths_total = sum(deaths), deaths_yesterday = first(deaths), population = first(popData2018)) %>% arrange(desc(population)) %>% DT()
covid %>% group_by(countriesAndTerritories) %>% summarise(cases_total = sum(cases), cases_yesterday = first(cases), deaths_total = sum(deaths), deaths_yesterday = first(deaths), population = first(popData2018)) %>% arrange(desc(population)) %>% DT::datatable()
?world.cities
library(openxlsx)
library(dplyr)
library(maps)
## get current covid 19 Data
covid <- read.xlsx("https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide.xlsx")
covid_plot <- group_by(covid,countriesAndTerritories) %>% summarise(text = paste0(countryterritoryCode[1], " cases: ", sum(cases), " deaths: ",sum(deaths)))
## merge it with geolocation data of worlds capital cities
mapdata <- world.cities %>%
filter(capital == 1) %>%
transmute(country = country.etc, lat = lat, lng = long) %>%
left_join(covid, ., by = c("countriesAndTerritories" = "country"))
shiny::runApp('R/coursera_data_science/covid19_liveticker/Covid19_Liveticker')
runApp()
runApp('R/coursera_data_science/covid19_liveticker/Covid19_Liveticker')
runApp()
runApp('R/coursera_data_science/covid19_liveticker/Covid19_Liveticker')
runApp()
runApp('R/coursera_data_science/covid19_liveticker/Covid19_Liveticker')
?cat
covid <- read.xlsx("https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide.xlsx")
covid_plot <- group_by(covid,geoId) %>%
summarise(cases = sum(cases, na.rm = TRUE),
deaths = sum(deaths, na.rm = TRUE),
labelText = paste(geoId[1], "Cases: ", sum(cases, na.rm = TRUE), "Deaths: ",sum(deaths, na.rm = TRUE), sep= "\n"))
world_spdf <- readOGR(
dsn= paste0(getwd(),"/data/") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE)
world_spdf@data <- left_join(world_spdf@data, covid_plot, by = c("ISO2" = "geoId"))
mybins <- c(0,10000,20000,50000,100000,500000,Inf)
mypalette <- colorBin( palette="YlOrBr", domain=world_spdf@data$cases, na.color="transparent", bins=mybins)
#renderPlot({
myMap <- leaflet(world_spdf) %>%
setView( lat=10, lng=0 , zoom=2) %>%
addTiles() %>%
addPolygons(stroke = FALSE,
layerId = world_spdf@data$ISO2,
fillOpacity = 0.8,
smoothFactor = 0.5,
color = ~mypalette(cases),
label = world_spdf@data$labelText) %>%
addLegend(pal = mypalette, values=~cases, opacity=0.9, title = "Cases", position = "bottomleft")
output$worldMap <- renderLeaflet(myMap)
#renderPlot({
myMap <- leaflet(world_spdf) %>%
setView( lat=10, lng=0 , zoom=2) %>%
addTiles() %>%
addPolygons(stroke = FALSE,
layerId = world_spdf@data$ISO2,
fillOpacity = 0.8,
smoothFactor = 0.5,
color = ~mypalette(cases),
label = world_spdf@data$labelText) %>%
addLegend(pal = mypalette, values=~cases, opacity=0.9, title = "Cases", position = "bottomleft")
observeEvent(input$worldMap_shape_click, { # update the location selectInput on map clicks
p <- input$worldMap_shape_click
output$country <- renderText(p$id) #p$id
print(p)
})
covid <- read.xlsx("https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide.xlsx")
covid_plot <- group_by(covid,geoId) %>%
summarise(cases = sum(cases, na.rm = TRUE),
deaths = sum(deaths, na.rm = TRUE),
labelText = paste(geoId[1], "Cases: ", sum(cases, na.rm = TRUE), "Deaths: ",sum(deaths, na.rm = TRUE), sep= "\n"))
world_spdf <- readOGR(
dsn= paste0(getwd(),"/data/") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE)
world_spdf@data <- left_join(world_spdf@data, covid_plot, by = c("ISO2" = "geoId"))
library(shiny)
library(leaflet)
library(maps)
library(dplyr)
library(rgdal)
library(openxlsx)
library(RColorBrewer)
world_spdf <- readOGR(
dsn= paste0(getwd(),"/data/") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE)
world_spdf@data <- left_join(world_spdf@data, covid_plot, by = c("ISO2" = "geoId"))
world_spdf <- readOGR(
dsn= paste0(getwd(),"/data/") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE)
setwd("~/R/coursera_data_science/covid19_liveticker/Covid19_Liveticker")
world_spdf <- readOGR(
dsn= paste0(getwd(),"/data/") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE)
world_spdf <- readOGR(
dsn= paste0(getwd(),"/data/") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE)
world_spdf@data <- left_join(world_spdf@data, covid_plot, by = c("ISO2" = "geoId"))
mybins <- c(0,10000,20000,50000,100000,500000,Inf)
mypalette <- colorBin( palette="YlOrBr", domain=world_spdf@data$cases, na.color="transparent", bins=mybins)
#renderPlot({
myMap <- leaflet(world_spdf) %>%
setView( lat=10, lng=0 , zoom=2) %>%
addTiles() %>%
addPolygons(stroke = FALSE,
layerId = world_spdf@data$ISO2,
fillOpacity = 0.8,
smoothFactor = 0.5,
color = ~mypalette(cases),
label = world_spdf@data$labelText) %>%
addLegend(pal = mypalette, values=~cases, opacity=0.9, title = "Cases", position = "bottomleft")
world_spdf@data$cases
world_spdf@data$NAME[is.na(world_spdf@data$cases)]
world_spdf@data$NAME[is.na(world_spdf@data$cases)]
world_spdf@data$ISO2[is.na(world_spdf@data$cases)]
covid[,world_spdf@data$ISO2[is.na(world_spdf@data$cases)]]
covid[world_spdf@data$ISO2[is.na(world_spdf@data$cases)],]
covid[world_spdf@data$ISO2[is.na(world_spdf@data$cases)]==covid$geoId,]
covid[covid$geoId %in% world_spdf@data$ISO2[is.na(world_spdf@data$cases)],]
covid[,covid$geoId %in% world_spdf@data$ISO2[is.na(world_spdf@data$cases)]]
covid[covid$geoId %in% world_spdf@data$ISO2[is.na(world_spdf@data$cases)],]
covid$geoId %in% world_spdf@data$ISO2[is.na(world_spdf@data$cases)]
sum(covid$geoId %in% world_spdf@data$ISO2[is.na(world_spdf@data$cases)])
sum(covid$geoId %in% world_spdf@data$ISO2[is.na(world_spdf@data$cases)])
sum(covid_plot$geoId %in% world_spdf@data$ISO2[is.na(world_spdf@data$cases)])
covid_plot$geoId %in% world_spdf@data$ISO2[is.na(world_spdf@data$cases)]
covid_plot$geoId
unique(covid$countriesAndTerritories)
"UK" %in% covid_plot$geoId
names(covid)
unique(covid$countryterritoryCode)
unique(covid$countryterritoryCode) %in% world_spdf@data$ISO3
runApp()
runApp()
